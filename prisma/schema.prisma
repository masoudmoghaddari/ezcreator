// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
  PRO_PLUS
}

model User {
  id                  String    @id @default(cuid())
  external_id         String?   @unique
  email               String?   @unique
  email_confirmed_at  DateTime?
  first_name          String?
  last_name           String?
  avatar_url          String?
  onboarding_complete Boolean   @default(false)

  plan             Plan      @default(FREE)
  subscriptionDate DateTime?

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  youtubeChannels  YoutubeChannel[]
  YoutubeVideo     YoutubeVideo[]
  GeneratedIdea    GeneratedIdea[]
  TikTokProfile    TikTokProfile[]
  InstagramProfile InstagramProfile[]

  @@index([external_id])
}

model YoutubeChannel {
  id         String   @id @default(cuid())
  user_id    String
  channel_id String
  title      String
  avatar_url String
  synced_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User            @relation(fields: [user_id], references: [id])
  videos        YoutubeVideo[]
  GeneratedIdea GeneratedIdea[]

  @@unique([user_id, channel_id])
  @@index([user_id])
}

model YoutubeVideo {
  id            String   @id @default(cuid())
  channel_id    String
  video_id      String
  title         String
  description   String?
  thumbnail_url String?
  duration      Int?
  view_count    Int?
  like_count    Int?
  tags          String?
  comment_count Int?
  published_at  DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user_id       String

  user          User            @relation(fields: [user_id], references: [id])
  channel       YoutubeChannel  @relation(fields: [channel_id], references: [id])
  GeneratedIdea GeneratedIdea[]

  @@unique([user_id, channel_id, video_id])
}

enum PlatformType {
  YOUTUBE
  TIKTOK
  INSTAGRAM
  TWITTER
}

model GeneratedIdea {
  id                   String       @id @default(cuid())
  youtube_channel_id   String?
  instagram_profile_id String?
  tiktok_profile_id    String?
  title                String
  description          String
  type                 PlatformType @default(YOUTUBE)
  user_id              String
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt

  user User @relation(fields: [user_id], references: [id])

  youtubeChannel   YoutubeChannel?   @relation(fields: [youtube_channel_id], references: [id])
  instagramProfile InstagramProfile? @relation(fields: [instagram_profile_id], references: [id])
  tiktokProfile    TikTokProfile?    @relation(fields: [tiktok_profile_id], references: [id])

  YoutubeVideo       YoutubeVideo?   @relation(fields: [youtube_video_id], references: [id])
  youtube_video_id   String?
  InstagramVideo     InstagramVideo? @relation(fields: [instagram_video_id], references: [id])
  instagram_video_id String?
  TikTokVideo        TikTokVideo?    @relation(fields: [tiktok_video_id], references: [id])
  tiktok_video_id    String?
}

model InstagramProfile {
  id         String   @id @default(cuid())
  user_id    String
  username   String
  synced_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User             @relation(fields: [user_id], references: [id])
  videos        InstagramVideo[]
  GeneratedIdea GeneratedIdea[]

  @@unique([user_id, username])
  @@index([user_id])
}

model InstagramVideo {
  id            String    @id @default(cuid())
  profile_id    String
  media_id      String
  media_url     String
  shortcode     String
  caption       String?
  hashtags      String?
  thumbnail_url String?
  timestamp     DateTime?
  like_count    Int?
  comment_count Int?
  view_count    Int?
  duration      Float?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  profile       InstagramProfile @relation(fields: [profile_id], references: [id])
  GeneratedIdea GeneratedIdea[]
}

model TikTokProfile {
  id              String  @id @default(cuid())
  user_id         String
  username        String // e.g., "khaby.lame"
  nickname        String // e.g., "Khabane lame"
  profile_url     String
  profile_picture String
  verified        Boolean @default(false)
  followers_count Int?
  total_likes     Int?
  total_videos    Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  synced_at  DateTime @default(now())

  user          User            @relation(fields: [user_id], references: [id])
  videos        TikTokVideo[]
  GeneratedIdea GeneratedIdea[]

  @@unique([user_id, username])
  @@index([user_id])
}

model TikTokVideo {
  id            String   @id @default(cuid())
  profile_id    String
  video_id      String   @unique
  text          String
  hashtags      String? // comma-separated
  play_count    Int?
  like_count    Int?
  comment_count Int?
  share_count   Int?
  collect_count Int?
  duration      Int? // seconds
  cover_url     String?
  video_url     String?
  published_at  DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  profile       TikTokProfile   @relation(fields: [profile_id], references: [id])
  GeneratedIdea GeneratedIdea[]
}
